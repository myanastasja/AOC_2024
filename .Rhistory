62 59 57 56 54 52 51
53 56 57 60 62 63
79 77 75 74 72
27 26 23 20 17 15
76 77 80 81 82
70 71 72 75 76 79 80
58 57 55 53 51 48 46 44
50 53 55 56 58 60
55 56 59 61 63 64 66
27 28 31 34 36 37 39
40 39 38 35 32
75 72 71 69 66 65 64
32 34 36 37 39 41
31 28 27 25 23 20 18
48 46 43 42 39 38
25 24 23 22 19 18 16 14
51 54 56 58 59 62
64 62 61 58 55 53
32 34 36 38 39 41 42 43
38 37 36 34 33
10 11 13 14 16 19 22 25
39 36 33 30 27 24 23 21
32 34 35 36 38 41 42 43
17 19 21 23 26 29 30 31
64 65 67 70 71 72 73 76
58 59 61 62 63
99 96 93 91 89 86
31 32 35 36 39 41 42
96 95 92 90 89 87 84 82
29 32 33 35 37 39 41
57 55 53 51 48 46
14 12 11 9 7 6
26 27 29 32 35 36 37
31 30 29 26 23 21
53 54 57 58 61
59 56 54 51 48 45 42 40
39 42 44 45 47 50
42 39 36 34 32 29 26 24
66 63 62 61 58 56
11 14 16 17 20 21 22 23
73 72 70 69 68 65
37 38 41 43 44
47 49 51 53 56 57 58
34 37 40 42 44 47
76 79 82 85 87
71 70 69 68 67 66 64 61
28 26 25 22 20 17 14 13
43 46 48 49 51
20 18 16 15 13 11
69 66 65 62 59
18 19 20 23 25
65 68 69 72 74 77 79 81
25 23 22 20 18 16
21 20 17 15 14 13 11 10
10 13 15 16 18 19 20 22
52 53 56 57 59 61 62 63
21 24 27 30 32 35 37 40
78 77 76 73 72 70 68 65
59 57 55 52 49 46 45 44
31 34 37 40 43 46 49 50
71 69 68 65 63 62 60 58
61 62 65 66 67 68
49 51 54 57 58 59 61 63
38 36 35 34 33 30 28 26
84 86 89 91 92 94 95
46 48 50 52 54 56
53 50 49 47 46 43 40
33 35 36 37 40 42
23 21 20 19 18 17 14
70 68 67 66 63 60
87 89 90 92 95 98
91 90 87 85 83 81
82 83 86 88 90 93 95 97
87 88 90 93 95
88 91 92 93 94 97
24 23 21 20 18 17
63 66 67 69 72 74 76
47 50 53 56 57 59 61
29 27 26 24 22 20
20 18 17 16 13 11 9 6
43 46 47 50 52 55 57 59
7 8 9 11 14 15
69 66 65 62 60 58
15 18 21 24 26
97 94 92 91 88 86 85
55 52 49 48 47
48 49 50 51 54 56 59
29 31 32 35 38 41 42 43
83 85 87 89 92 93 96 99
71 74 76 77 80 82 84 86
29 26 23 22 20 19 17
45 47 50 51 52 55 57
32 31 30 29 27
99 98 97 96 94 91 88
21 20 17 14 12
85 84 82 79 76 75
71 74 77 78 81 82 85 87
78 79 80 81 83
85 86 89 91 92 93 94
9 11 14 15 17 18
10 11 13 15 17 18
50 52 53 55 57
29 30 33 36 38 41
17 18 21 24 27 30 31
49 50 51 54 55 57 59
64 62 60 59 57 54 53 51
57 60 63 66 69 70 72 74
96 95 93 91 88 86
87 85 82 80 78 76 74
67 69 72 75 78 81
18 20 21 23 24
19 16 13 11 8 7 5 2
60 61 62 63 65
40 38 35 32 29 28 25
86 87 89 91 92 93
21 23 24 25 27 28 29
20 23 25 28 31
52 55 56 57 59
4 7 9 10 12
39 42 44 47 48 51
12 15 18 21 24 26 29 32
1 3 5 8 9 11 13
14 17 20 21 22 25 26
14 11 10 8 6 5 2
21 23 24 27 30
33 35 36 37 39
35 32 31 28 25
79 78 75 72 69
33 35 37 38 39 42 44
22 21 19 18 15 12 9 8
66 65 64 63 62 61 59 58
88 85 84 81 79 76 74
73 71 68 66 65 62
66 67 69 71 73
51 49 47 46 45 44
29 26 24 21 18 17 16
21 20 19 16 15 13 11 10
65 63 62 60 58 57
67 65 64 62 59 56 55 52
10 11 12 14 15
71 68 66 65 63 61 58
41 39 36 35 34 31 29 27
95 92 91 89 88 87
24 26 28 30 33 35 38
88 90 91 93 96
51 48 47 45 44
68 65 64 63 61 59
84 83 82 79 78 77 76
32 30 28 25 23
42 40 38 37 34
29 28 25 22 19 16 13
21 24 26 29 30 32 35 38
57 59 60 61 62 65 67
50 53 56 59 61 63 66 67
56 58 60 62 63
44 43 41 38 36 33
14 11 10 9 6 5
17 18 19 20 23 26
45 46 48 51 53 54 56
93 92 90 88 86 84
42 40 39 37 36 35
11 14 17 20 22
55 52 51 50 49 47 46
30 32 35 38 39 41 44
57 60 61 64 67 69
49 46 44 41 38
28 26 24 23 22 20 19
3 6 7 8 11 14 15 16
74 71 68 67 65 64
73 72 70 67 66 64
32 31 28 26 24
86 89 91 93 96 99
91 93 96 98 99
63 61 60 57 55 53 51 48
55 54 51 50 47 46 45 44
76 73 71 69 68 65
61 64 67 69 71
20 23 26 27 30 33 36 39
47 50 52 55 58 59 60
68 66 63 62 61 60
14 13 10 9 8
71 72 75 78 81 84 87
43 44 45 47 49
97 95 93 92 91 90 87
27 25 22 20 19 18
61 64 67 68 69
92 89 87 84 81 79 76 75
79 80 83 86 89 90 92 93
20 21 23 26 28
40 37 34 33 32 30 28 27
16 15 14 11 10 8
46 43 40 39 38
42 45 46 48 49 51
15 12 9 8 6 4 1
21 18 15 14 11 10 8
32 31 30 28 25
66 67 70 73 76
31 33 34 37 39 42 44
77 79 80 82 83
71 73 75 78 80 83 86
14 17 20 21 23
61 59 58 57 54 53 51 48
17 18 21 22 25
19 22 24 27 28 31
62 65 66 68 71 74 76
76 79 81 83 84
33 31 28 27 24
85 83 82 81 80 79 76 74
72 71 69 66 63 62
83 86 89 91 92 93 94
61 64 67 68 70 71 73
59 61 63 64 65 66 69 72
25 22 19 18 16 15 14
56 54 51 49 48 46
64 65 67 68 69
71 72 73 75 76 78 79
67 70 71 73 74 77
88 89 90 93 96 98
33 34 35 38 40
28 31 32 35 37
73 72 70 69 67
41 39 37 36 35
67 64 63 60 57 56 55
75 72 71 70 67 64 62
91 92 95 96 97 99
58 57 56 54 51
38 39 40 41 42 44
54 52 51 50 47
42 39 38 36 35 33
27 30 33 34 37
73 72 71 69 67 66 63
68 67 66 65 62 61
16 13 11 10 8 7
25 26 28 30 33 34 35 37
65 62 60 59 58
46 44 43 42 40 37 34
31 28 27 26 24 21 18 16
10 12 13 15 16 19 21 24
45 48 51 54 57 59 62 64
84 87 90 92 94 96
80 82 84 87 89 90
17 18 19 20 23
77 80 83 86 88 90
40 37 35 33 31 30 28
76 73 72 70 68 67 66 64
53 54 56 59 60
21 24 25 27 30 33 35
59 57 54 53 52 49 46 45
46 45 43 40 39 36 33
49 46 43 42 41
30 32 33 36 37 38 41 42
15 12 10 8 5
93 90 89 86 83 82 79 78
63 64 66 68 71 72 75
39 40 43 45 47
42 39 37 35 32 31 28
51 53 55 58 61 62
59 56 55 52 51
40 37 35 34 32 30 29 28
31 33 34 36 39 42 43
90 91 93 94 95 98
33 34 37 39 42 45 48
62 64 65 66 67 69
65 62 61 60 57
86 83 80 77 76
74 73 72 71 69 67
23 24 26 29 30
19 17 15 12 10 7
99 98 97 96 94
22 23 25 28 30 33 35
59 62 64 66 67
24 21 19 18 16 15 14 11
10 8 6 5 4 2 1
87 85 83 80 79 77 74 73
23 26 28 29 30 31
14 16 19 22 25
41 42 45 46 47 49
78 81 82 85 87
66 64 63 61 59 56 54
16 15 12 10 7
84 82 79 77 76 74
81 82 84 85 88 91 92
86 83 81 80 77 74
81 83 86 88 89"
source("02_01_input.R")
library(stringr)
issafe <- function(x) {
result <- TRUE
nelements <- x %>% str_split(.," ", n = Inf, simplify = FALSE) %>% unlist() %>% strtoi() %>% length()
num_report <- x %>% str_split(.," ", n = Inf, simplify = FALSE) %>% unlist() %>% strtoi()
for (i in 2:nelements) {
result <- result && ((num_report[i] > num_report[i-1]) == (num_report[2] > num_report[1]))
result <- result && (abs(num_report[i]-num_report[i-1]) >= 1)
result <- result && (abs(num_report[i]-num_report[i-1]) <= 3)
}
return(result)
}
reports <- str_split(reports_input, "\n", n = Inf, simplify = FALSE)
sep_reports <- unlist(reports)
logicalarray <- lapply(sep_reports, issafe) %>% unlist()
safe_reports <- length(logicalarray[logicalarray==TRUE])
safe_reports
source("02_01_input.R")
library(stringr)
issafe <- function(x) {
result <- TRUE
nelements <- length(x)
for (i in 2:nelements) {
result <- result && ((x[i] > x[i-1]) == (x[2] > x[1]))
result <- result && (abs(x[i]-x[i-1]) >= 1)
result <- result && (abs(x[i]-x[i-1]) <= 3)
}
return(result)
}
issafe_after_dumpener <- function(x){
result <- TRUE
nelements <- x %>% str_split(.," ", n = Inf, simplify = FALSE) %>% unlist() %>% strtoi() %>% length()
num_report <- x %>% str_split(.," ", n = Inf, simplify = FALSE) %>% unlist() %>% strtoi()
result <- result && issafe(num_report)
if(issafe(num_report)) {
return(result)
} else {
for (i in 1:nelements) result <- result || issafe(num_report[-i])
return(result)
}
}
reports <- str_split(reports_input, "\n", n = Inf, simplify = FALSE)
sep_reports <- unlist(reports)
logicalarray <- lapply(sep_reports, issafe_after_dumpener) %>% unlist()
safe_reports <- length(logicalarray[logicalarray==TRUE])
safe_reports
source("03_01_input.R")
typeof(input)
x <- "mul(696,865)"
str_extract_all(input, x, simplify = FALSE)
str_extract(input, x)
input
x
x <- c("mul(696,865)")
str_extract(input, x)
str_extract_all(input, x)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(input, "\\d")
str_extract_all(input, "\\d")
str_extract(input, "mul(\\d,\\d)")
input
str_extract(input, "mul")
str_extract_all(input, "mul")
str_extract_all(input, "mul(")
str_extract_all(input, "mul\(")
str_extract_all(input, "mul\\(")
str_extract_all(input, "mul\\(\\d")
str_extract_all(input, "mul\\(\\d,")
str_extract_all(input, "mul\\(\\dd,")
str_extract_all(input, "mul\\(\\d\\d,")
str_extract_all(input, "mul\\(\\d+,")
str_extract_all(input, "mul\\(\\d+,\\d+")
str_extract_all(input, "mul\\(\\d+,\\d+\\)")
source("03_01_input.R")
str_extract_all(input, "mul\\(\\d+,\\d+\\)")
good_instructions <- str_extract_all(input, "mul\\(\\d+,\\d+\\)")
length(good_instructions)
nrow(good_instructions)
good_instructions <- str_extract_all(input, "mul\\(\\d+,\\d+\\)") %>% unlist()
good_instructions
nrow(good_instructions)
length(good_instructions)
x <- "mul(542,429)"
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+)
}
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+")
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+")
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+")
cat(mul_factors)
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+")
mul_factors
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+") %>% unlist()
return(mul_factors[1] * mul_factors[2])
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+") %>% strtoi %>% unlist()
return(mul_factors[1] * mul_factors[2])
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+") %>% strtoi %>% unlist()
mul_factors
return(mul_factors[1] * mul_factors[2])
}
x <- "mul(542,429)"
mul(x)
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+") %>% unlist() %>% strtoi
mul_factors
return(mul_factors[1] * mul_factors[2])
}
x <- "mul(542,429)"
mul(x)
542 * 429
library(plyr)
library(stringr)
result <- lapply(good_instructions,sum(mul))
library(stringr)
library(plyr)
source("03_01_input.R")
good_instructions <- str_extract_all(input, "mul\\(\\d+,\\d+\\)") %>% unlist()
mul <- function(x) {
mul_factors <- str_extract_all(x, "\\d+") %>% unlist() %>% strtoi
mul_factors
return(mul_factors[1] * mul_factors[2])
}
result <- lapply(good_instructions,sum(mul))
result <- lapply(good_instructions,mul)
result
result <- lapply(good_instructions,mul) %>% sum
result <- lapply(good_instructions,mul) %>% lapply(.,sum)
result
result <- sapply(good_instructions,mul) %>% lapply(.,sum)
result
result <- lapply(good_instructions,mul) %>% unlist() %>% lapply(.,sum)
result
result <- lapply(good_instructions,mul) %>% unlist()
result
result <- lapply(good_instructions,mul) %>% unlist() %>% sum(.)
result
input <- "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
x <- "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
enabled_muls <- str_extract_all(x, "do\\(\\)\\?")
enabled_muls
enabled_muls <- str_extract_all(x, "?=do\\(\\)\\?")
enabled_muls <- str_extract_all(x, "(?=do\\(\\)\\?)")
enabled_muls
enabled_muls <- str_extract_all(x, "(?=do\\(\\)\\??)")
enabled_muls
enabled_muls <- str_extract_all(x, "(?= do\\(\\)\\? ?)")
enabled_muls
str_extract_all(x, "(?= do\\(\\)\\?\?)")
str_extract_all(x, "(?=do\\(\\)\\?\?)")
str_extract_all(x, "(?=do\\(\\)\\??)")
str_extract_all(x, "do\\(\\)\\?")
str_extract_all(x, "don\\'t\\(\\)\\?")
str_extract_all(x, "don\'t\\(\\)\\?")
str_extract_all(x, "don't\\(\\)\\?")
x
str_extract_all(x, "don't")
str_extract_all(x, "don't\\(\\)")
enabled_muls <- str_extract_all(x, "(?=do\\(\\)\\??).")
enabled_muls
str_extract_all(x, "(?=do\\(\\)\\??).")
str_extract_all(x, "(?=do\\(\\)).")
str_extract_all(x, "(?=do\\(\\))#")
str_extract_all(x, "(?=do\\(\\))")
str_extract_all(x, "(?=do\\(\\)")
str_extract_all(x, "(?=do\\(\\)?")
str_extract_all(x, "(?=do\\(\\)?)")
str_detect(x, "(?=do\\(\\)?)")
substring(x, "(?=do\\(\\)?)")
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?)")
enabled_muls
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).+")
enabled_muls
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).?")
enabled_muls
str_extract_all(x, "(?=>do\\(\\)?).?")
str_extract_all(x, "(?<=do\\(\\)?).?")
str_extract_all(x, "(?<=do\\(\\)?)")
x
str_extract_all(x, "don't\\(\\)")
str_extract_all(x, "(?=do\\(\\)?)")
str_extract_all(x, "(?=do\\(\\)?).....")
x <- c("1 piece", "2 pieces", "3")
x
str_extract(x, "\\d+(?= pieces?)")
str_extract(x, "\\d+(?= piecessss?)")
str_extract(x, "\\d+(?= piecesss?)")
str_extract(x, "\\d+(?= pieces?)")
x <- c("1 piece", "2 pieces", "3 piece")
str_extract(x, "\\d+(?= pieces?)")
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?)*")
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).*")
enabled_muls
str_extract_all(x, "don\\(\\)")
x <- "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).*")
enabled_muls
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).*(?<=do\\(\\)?)")
enabled_muls
enabled_muls <- str_extract_all(x, "(?=do\\(\\)?).*(?<=don't\\(\\)?)")
enabled_muls
str_extract_all(x, "don't\\(\\)")
enabled_muls <- str_extract_all(x, ".*(?<=don't\\(\\)?)")
enabled_muls
